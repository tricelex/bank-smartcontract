/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BankInterface extends utils.Interface {
  functions: {
    "bankName()": FunctionFragment;
    "bankOwner()": FunctionFragment;
    "customerBalance(address)": FunctionFragment;
    "depositMoney()": FunctionFragment;
    "getBankBalance()": FunctionFragment;
    "getCustomerBalance()": FunctionFragment;
    "setBankName(string)": FunctionFragment;
    "withDrawMoney(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bankName"
      | "bankOwner"
      | "customerBalance"
      | "depositMoney"
      | "getBankBalance"
      | "getCustomerBalance"
      | "setBankName"
      | "withDrawMoney"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bankName", values?: undefined): string;
  encodeFunctionData(functionFragment: "bankOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "customerBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositMoney",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBankBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCustomerBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setBankName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withDrawMoney",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bankName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bankOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "customerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositMoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBankBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustomerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBankName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withDrawMoney",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Bank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bankName(overrides?: CallOverrides): Promise<[string]>;

    bankOwner(overrides?: CallOverrides): Promise<[string]>;

    customerBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositMoney(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBankBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCustomerBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBankName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withDrawMoney(
      _to: string,
      _total: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bankName(overrides?: CallOverrides): Promise<string>;

  bankOwner(overrides?: CallOverrides): Promise<string>;

  customerBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositMoney(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBankBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCustomerBalance(overrides?: CallOverrides): Promise<BigNumber>;

  setBankName(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withDrawMoney(
    _to: string,
    _total: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bankName(overrides?: CallOverrides): Promise<string>;

    bankOwner(overrides?: CallOverrides): Promise<string>;

    customerBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositMoney(overrides?: CallOverrides): Promise<void>;

    getBankBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCustomerBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setBankName(_name: string, overrides?: CallOverrides): Promise<void>;

    withDrawMoney(
      _to: string,
      _total: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bankName(overrides?: CallOverrides): Promise<BigNumber>;

    bankOwner(overrides?: CallOverrides): Promise<BigNumber>;

    customerBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositMoney(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBankBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCustomerBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setBankName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withDrawMoney(
      _to: string,
      _total: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bankName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bankOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    customerBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositMoney(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBankBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCustomerBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBankName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withDrawMoney(
      _to: string,
      _total: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
